for (step in seq(0, 613, 10)) {
subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > step-10,]
binout <- c(binout, mean(subdf$winner - 1))
}
#subdf <- elo_wins[elo_wins$elo_diff < 10 & elo_wins$elo_diff > 0,]
#mean(as.double(subdf$winner) - 1)
plot(seq(0, 613, 10), binout)
binout <- c()
for (step in seq(0, 613, 10)) {
subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > step-10,]
binout <- c(binout, mean(subdf$winner - 1))
}
#subdf <- elo_wins[elo_wins$elo_diff < 10 & elo_wins$elo_diff > 0,]
#mean(as.double(subdf$winner) - 1)
#plot(seq(0, 613, 10), binout)
binout
#length(binned_outcomes)
#length(seq(0, 613, 10))
binout <- c()
for (step in seq(0, 613, 10)) {
subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > step-10,]
binout <- c(binout, mean(subdf$winner))
}
#subdf <- elo_wins[elo_wins$elo_diff < 10 & elo_wins$elo_diff > 0,]
#mean(as.double(subdf$winner) - 1)
#plot(seq(0, 613, 10), binout)
binout
#length(binned_outcomes)
#length(seq(0, 613, 10))
binout <- c()
for (step in seq(0, 613, 10)) {
subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
binout <- c(binout, mean(subdf$winner - 1))
}
#subdf <- elo_wins[elo_wins$elo_diff < 10 & elo_wins$elo_diff > 0,]
#mean(as.double(subdf$winner) - 1)
#plot(seq(0, 613, 10), binout)
binout
#length(binned_outcomes)
#length(seq(0, 613, 10))
binout <- c()
#for (step in seq(0, 613, 10)) {
#    subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
#    binout <- c(binout, mean(subdf$winner - 1))
#}
#subdf <- elo_wins[elo_wins$elo_diff < 10 & elo_wins$elo_diff > 0,]
#mean(as.double(subdf$winner) - 1)
#plot(seq(0, 613, 10), binout)
seq(0, 613, 10)
binout <- c()
#for (step in seq(0, 613, 10)) {
#    subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
#    binout <- c(binout, mean(subdf$winner - 1))
#}
#subdf <- elo_wins[elo_wins$elo_diff < 10 & elo_wins$elo_diff > 0,]
#mean(as.double(subdf$winner) - 1)
#plot(seq(0, 613, 10), binout)
seq(0, 613, 10) - 1
binout <- c()
#for (step in seq(0, 613, 10)) {
#    subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
#    binout <- c(binout, mean(subdf$winner - 1))
#}
#subdf <- elo_wins[elo_wins$elo_diff < 10 & elo_wins$elo_diff > 0,]
#mean(as.double(subdf$winner) - 1)
#plot(seq(0, 613, 10), binout)
seq(0, 613, 10) - 10
binout <- c()
for (step in seq(0, 613, 10)) {
#subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
#binout <- c(binout, mean(subdf$winner - 1))
print(step - 10)
}
#subdf <- elo_wins[elo_wins$elo_diff < 10 & elo_wins$elo_diff > 0,]
#mean(as.double(subdf$winner) - 1)
#plot(seq(0, 613, 10), binout)
binout <- c()
for (step in seq(10, 613, 10)) {
#subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
#binout <- c(binout, mean(subdf$winner - 1))
print(step - 10)
}
#subdf <- elo_wins[elo_wins$elo_diff < 10 & elo_wins$elo_diff > 0,]
#mean(as.double(subdf$winner) - 1)
#plot(seq(0, 613, 10), binout)
binout <- c()
for (step in seq(10, 613, 10)) {
subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
binout <- c(binout, mean(subdf$winner - 1))
}
#subdf <- elo_wins[elo_wins$elo_diff < 10 & elo_wins$elo_diff > 0,]
#mean(as.double(subdf$winner) - 1)
#plot(seq(0, 613, 10), binout)
binout <- c()
for (step in seq(10, 613, 10)) {
subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
binout <- c(binout, mean(as.double(subdf$winner) - 1))
}
#subdf <- elo_wins[elo_wins$elo_diff < 10 & elo_wins$elo_diff > 0,]
#mean(as.double(subdf$winner) - 1)
#plot(seq(0, 613, 10), binout)
binout <- c()
for (step in seq(10, 613, 10)) {
subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
binout <- c(binout, mean(as.double(subdf$winner) - 1))
}
#subdf <- elo_wins[elo_wins$elo_diff < 10 & elo_wins$elo_diff > 0,]
#mean(as.double(subdf$winner) - 1)
plot(seq(0, 613, 10), binout)
binout <- c()
for (step in seq(10, 613, 10)) {
subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
binout <- c(binout, mean(as.double(subdf$winner) - 1))
}
#subdf <- elo_wins[elo_wins$elo_diff < 10 & elo_wins$elo_diff > 0,]
#mean(as.double(subdf$winner) - 1)
#plot(seq(0, 613, 10), binout)
length(seq(0, 613, 10))
length(binout)
binout <- c()
for (step in seq(10, 613, 10)) {
subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
binout <- c(binout, mean(as.double(subdf$winner) - 1))
}
#subdf <- elo_wins[elo_wins$elo_diff < 10 & elo_wins$elo_diff > 0,]
#mean(as.double(subdf$winner) - 1)
#plot(seq(0, 613, 10), binout)
length(seq(0, 603, 10))
length(binout)
binout <- c()
for (step in seq(10, 613, 10)) {
subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
binout <- c(binout, mean(as.double(subdf$winner) - 1))
}
#subdf <- elo_wins[elo_wins$elo_diff < 10 & elo_wins$elo_diff > 0,]
#mean(as.double(subdf$winner) - 1)
plot(seq(0, 603, 10), binout)
#length(seq(0, 603, 10))
#length(binout)
binout <- c()
for (step in seq(10, 613, 10)) {
subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
binout <- c(binout, mean(as.double(subdf$winner) - 1))
}
#subdf <- elo_wins[elo_wins$elo_diff < 10 & elo_wins$elo_diff > 0,]
#mean(as.double(subdf$winner) - 1)
plot(seq(0, 603, 10), binout)
lines(dummyx$elo_diff, preds)
#length(seq(0, 603, 10))
#length(binout)
dummyx <- data.frame(elo_diff = seq(0, 613))
preds <- predict(glm_elo, newdata = dummyx)
plot(dummyx$elo_diff, preds)
dummyx <- data.frame(elo_diff = seq(0, 613))
preds <- predict(glm_elo, newdata = dummyx, type='response')
plot(dummyx$elo_diff, preds)
binout <- c()
for (step in seq(10, 613, 10)) {
subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
binout <- c(binout, mean(as.double(subdf$winner) - 1))
}
#subdf <- elo_wins[elo_wins$elo_diff < 10 & elo_wins$elo_diff > 0,]
#mean(as.double(subdf$winner) - 1)
plot(seq(0, 603, 10), binout)
lines(dummyx$elo_diff, preds)
#length(seq(0, 603, 10))
#length(binout)
dummyx <- data.frame(elo_diff = seq(0, 613))
preds <- predict(glm_elo, newdata = dummyx, type='response')
binout <- c()
for (step in seq(10, 613, 10)) {
subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
binout <- c(binout, mean(as.double(subdf$winner) - 1))
}
plot(seq(0, 603, 10), binout,
xlab = "Elo Difference", ylab = "Probability of Higher Elo Player Win")
lines(dummyx$elo_diff, preds)
dummyx <- data.frame(elo_diff = seq(0, 613))
preds <- predict(glm_elo, newdata = dummyx, type='response')
binout <- c()
for (step in seq(10, 613, 10)) {
subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
binout <- c(binout, mean(as.double(subdf$winner) - 1))
}
plot(seq(0, 603, 10), binout,
xlab = "Elo Difference", ylab = "Probability of Higher Elo Player Win",
main = "ELO Model: Elo Diff vs Win Prob")
lines(dummyx$elo_diff, preds, col = 'r')
dummyx <- data.frame(elo_diff = seq(0, 613))
preds <- predict(glm_elo, newdata = dummyx, type='response')
binout <- c()
for (step in seq(10, 613, 10)) {
subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
binout <- c(binout, mean(as.double(subdf$winner) - 1))
}
plot(seq(0, 603, 10), binout,
xlab = "Elo Difference", ylab = "Probability of Higher Elo Player Win",
main = "ELO Model: Elo Diff vs Win Prob")
lines(dummyx$elo_diff, preds, col = 'red')
dummyx <- data.frame(elo_diff = seq(0, 613))
preds <- predict(glm_elo, newdata = dummyx, type='response')
binout <- c()
for (step in seq(10, 613, 10)) {
subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
binout <- c(binout, mean(as.double(subdf$winner) - 1))
}
plot(seq(0, 603, 10), binout,
xlab = "Elo Difference", ylab = "Probability of Higher Elo Player Win",
main = "ELO Model: Elo Diff vs Win Prob")
lines(dummyx$elo_diff, preds, col = 'red')
legend("topleft",
legend = c("Averaged Bin Outcomes", "Predicted Prob."),
col = c('black', 'red'),
pch = c(1),
lty = c(1))
dummyx <- data.frame(elo_diff = seq(0, 613))
preds <- predict(glm_elo, newdata = dummyx, type='response')
binout <- c()
for (step in seq(10, 613, 10)) {
subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
binout <- c(binout, mean(as.double(subdf$winner) - 1))
}
plot(seq(0, 603, 10), binout,
xlab = "Elo Difference", ylab = "Probability of Higher Elo Player Win",
main = "ELO Model: Elo Diff vs Win Prob")
lines(dummyx$elo_diff, preds, col = 'red')
legend("topleft",
legend = c("Averaged Bin Outcomes", "Predicted Prob."),
col = c('black', 'red'),
pch = c(1,0),
lty = c(0,1))
dummyx <- data.frame(elo_diff = seq(0, 613))
preds <- predict(glm_elo, newdata = dummyx, type='response')
binout <- c()
for (step in seq(10, 613, 10)) {
subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
binout <- c(binout, mean(as.double(subdf$winner) - 1))
}
plot(seq(0, 603, 10), binout,
xlab = "Elo Difference", ylab = "Probability of Higher Elo Player Win",
main = "ELO Model: Elo Diff vs Win Prob")
lines(dummyx$elo_diff, preds, col = 'red')
legend("topleft",
legend = c("Averaged Bin Outcomes", "Predicted Prob."),
col = c('black', 'red'),
pch = c(1,0),
lty = c(,1))
dummyx <- data.frame(elo_diff = seq(0, 613))
preds <- predict(glm_elo, newdata = dummyx, type='response')
binout <- c()
for (step in seq(10, 613, 10)) {
subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
binout <- c(binout, mean(as.double(subdf$winner) - 1))
}
plot(seq(0, 603, 10), binout,
xlab = "Elo Difference", ylab = "Probability of Higher Elo Player Win",
main = "ELO Model: Elo Diff vs Win Prob")
lines(dummyx$elo_diff, preds, col = 'red')
legend("topleft",
legend = c("Averaged Bin Outcomes", "Predicted Prob."),
col = c('black', 'red'),
pch = c(1,0),
lty = c(NA,1))
glm_class <- glm(winner ~ elo_diff + winner_class : loser_class, data = elo_wins, family = "binomial")
summary(glm_class)
elo_wins$winner <- as.factor(elo_wins$winner)
elo_wins$winner_class <- as.factor(elo_wins$winner_class)
elo_wins$loser_class <- as.factor(elo_wins$loser_class)
head(elo_wins)
elo_wins <- read.csv('elo_wins.csv')
colnames(elo_wins) <- c('elo_diff', 'lower.elo.class', 'higher.elo.class', 'winner')
elo_wins$winner <- as.factor(elo_wins$winner)
elo_wins$lower.elo.class <- as.factor(elo_wins$lower.elo.class)
elo_wins$higher.elo.class <- as.factor(elo_wins$higher.elo.class)
head(elo_wins)
glm_0 <- glm(winner ~ 1, data = elo_wins, family = "binomial")
summary(glm_0)
glm_elo <- glm(winner ~ elo_diff, data = elo_wins, family = "binomial")
summary(glm_elo)
dummyx <- data.frame(elo_diff = seq(0, 613))
preds <- predict(glm_elo, newdata = dummyx, type='response')
binout <- c()
for (step in seq(10, 613, 10)) {
subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
binout <- c(binout, mean(as.double(subdf$winner) - 1))
}
plot(seq(0, 603, 10), binout,
xlab = "Elo Difference", ylab = "Probability of Higher Elo Player Win",
main = "ELO Model: Elo Diff vs Win Prob")
lines(dummyx$elo_diff, preds, col = 'red')
legend("topleft",
legend = c("Averaged Bin Outcomes", "Predicted Prob."),
col = c('black', 'red'),
pch = c(1,0),
lty = c(NA,1))
glm_class <- glm(winner ~ elo_diff + lower.elo.class : higher.elo.class, data = elo_wins, family = "binomial")
summary(glm_class)
knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
library('aod')
library('arm')
library('caret')
elo_wins <- read.csv('elo_wins.csv')
colnames(elo_wins) <- c('elo_diff', 'lower.elo.class', 'higher.elo.class', 'winner')
elo_wins$winner <- as.factor(elo_wins$winner)
elo_wins$lower.elo.class <- as.factor(elo_wins$lower.elo.class)
elo_wins$higher.elo.class <- as.factor(elo_wins$higher.elo.class)
head(elo_wins)
glm_0 <- glm(winner ~ 1, data = elo_wins, family = "binomial")
summary(glm_0)
glm_elo <- glm(winner ~ elo_diff, data = elo_wins, family = "binomial")
summary(glm_elo)
binnedplot(fitted(glm_elo), residuals(glm_elo, type = "response"),
xlab ="Fitted Probabilities", ylab="Averaged Residuals", pch=19, col.pts="red", cex.pts=1.5, main="Binned Residuals vs. Fitted Plot")
plot(cooks.distance(glm_elo), type="h", lwd=2,
xlab="Observation index",
ylab="Cook's distances",
main="Cook's distances for Tennis data")
abline(h=1, lty=2, col="red")
anova(glm_0, glm_elo, test='Chi')
dummyx <- data.frame(elo_diff = seq(0, 613))
preds <- predict(glm_elo, newdata = dummyx, type='response')
binout <- c()
for (step in seq(10, 613, 10)) {
subdf <- elo_wins[elo_wins$elo_diff < step & elo_wins$elo_diff > (step-10),]
binout <- c(binout, mean(as.double(subdf$winner) - 1))
}
plot(seq(0, 603, 10), binout,
xlab = "Elo Difference", ylab = "Probability of Higher Elo Player Win",
main = "ELO Model: Elo Diff vs Win Prob")
lines(dummyx$elo_diff, preds, col = 'red')
legend("topleft",
legend = c("Averaged Bin Outcomes", "Predicted Prob."),
col = c('black', 'red'),
pch = c(1,0),
lty = c(NA,1))
glm_class <- glm(winner ~ elo_diff + lower.elo.class : higher.elo.class,
data = elo_wins, family = "binomial")
summary(glm_class)
anova(glm_elo, glm_class, test = 'Chi')
binnedplot(fitted(glm_class), residuals(glm_class, type = "response"),
xlab ="Fitted Probabilities", ylab="Averaged Residuals", pch=19, col.pts="red", cex.pts=1.5, main="Binned Residuals vs. Fitted Plot")
plot(cooks.distance(glm_class), type="h", lwd=2,
xlab="Observation index",
ylab="Cook's distances",
main="Cook's distances for Tennis data")
abline(h=1, lty=2, col="red")
#factor("0", levels = levels(elo_wins$lower.elo.class))
# 2444 - 2350 = 94
FedvsNad <- data.frame(elo_diff = c(0),
lower.elo.class = c("0"),
higher.elo.class = c("3"))
predict(glm_elo, newdata = FedvsNad, type='response')
predict.glm(glm_class, newdata = FedvsNad, type='response')
glm_class <- glm(winner ~ - 1 + elo_diff + lower.elo.class : higher.elo.class,
data = elo_wins, family = "binomial")
summary(glm_class)
anova(glm_elo, glm_class, test = 'Chi')
binnedplot(fitted(glm_class), residuals(glm_class, type = "response"),
xlab ="Fitted Probabilities", ylab="Averaged Residuals", pch=19, col.pts="red", cex.pts=1.5, main="Binned Residuals vs. Fitted Plot")
plot(cooks.distance(glm_class), type="h", lwd=2,
xlab="Observation index",
ylab="Cook's distances",
main="Cook's distances for Tennis data")
abline(h=1, lty=2, col="red")
#factor("0", levels = levels(elo_wins$lower.elo.class))
# 2444 - 2350 = 94
FedvsNad <- data.frame(elo_diff = c(0),
lower.elo.class = c("0"),
higher.elo.class = c("3"))
predict(glm_elo, newdata = FedvsNad, type='response')
predict.glm(glm_class, newdata = FedvsNad, type='response')
glm_class <- glm(winner ~  elo_diff + lower.elo.class * higher.elo.class,
data = elo_wins, family = "binomial")
summary(glm_class)
glm_class <- glm(winner ~  - 1 + elo_diff + lower.elo.class * higher.elo.class,
data = elo_wins, family = "binomial")
summary(glm_class)
anova(glm_elo, glm_class, test = 'Chi')
glm_class <- glm(winner ~  elo_diff + lower.elo.class * higher.elo.class,
data = elo_wins, family = "binomial")
summary(glm_class)
#factor("0", levels = levels(elo_wins$lower.elo.class))
# 2444 - 2350 = 94
FedvsNad <- data.frame(elo_diff = c(0),
lower.elo.class = c("0"),
higher.elo.class = c("3"))
predict(glm_elo, newdata = FedvsNad, type='response')
predict.glm(glm_class, newdata = FedvsNad, type='response')
#factor("0", levels = levels(elo_wins$lower.elo.class))
# 2444 - 2350 = 94
FedvsNad <- data.frame(elo_diff = c(0),
lower.elo.class = c("0"),
higher.elo.class = c("3"))
predict(glm_elo, newdata = FedvsNad, type='response')
predict.glm(glm_class, newdata = FedvsNad, type='response')
glm_class <- glm(winner ~  elo_diff + lower.elo.class : higher.elo.class,
data = elo_wins, family = "binomial")
summary(glm_class)
#factor("0", levels = levels(elo_wins$lower.elo.class))
# 2444 - 2350 = 94
FedvsNad <- data.frame(elo_diff = c(0),
lower.elo.class = c("0"),
higher.elo.class = c("3"))
predict(glm_elo, newdata = FedvsNad, type='response')
predict.glm(glm_class, newdata = FedvsNad, type='response')
exp(0)
exp(0.5)
exp(1)
1 / (1 + exp(-(3.1686 - 0.01811*140 - 0.28823)))
1 / (1 + exp(-(3.1686 - 0.01811*140 - 0.28823)))
1 - 0.58
-3.350917 + 0.3531622 + 140 * 0.02245549
-3.350917 + 0.3531622 + 140 * 0.02245549
-2.196539 + 0.2030789 + 140 * 0.01249315
-3.350917 + 0.3531622 + 140 * 0.02245549
-2.196539 + 0.2030789 + 140 * 0.01249315
exp(0.146) / (1 + exp(-0.244) + exp(0.146))
exp(-0.184883)
2.023 + 2.023^2 / 2.2644
2.023 + 2.023^2 / 2.2644
1^2
2.023 + 2.023^2 / 2.2644
2^2
1 / (1 + exp(12.85))
1 / (1 + exp(-12.85))
1 / (1 + exp(12.85))
setwd("~/Documents/CHIP/Twitter_Analysis")
alc_df = read.csv('Train_Data/ALCOHOL-2020-01--2020-12.csv')
head(alc_df)
alc_df = read.csv('Train_Data/ALCOHOL-2020-01--2020-12.csv')
dem_df = read.csv('/home/johnattan/Documents/CHIP/GST_Alc/Features_Data - Feature_Data.csv')
head(alc_df)
head(dem_df)
alc_df = read.csv('Train_Data/ALCOHOL-2020-01--2020-12.csv')
alc_df <- alc_df[c("State", "Date", "Count")]
dem_df = read.csv('/home/johnattan/Documents/CHIP/GST_Alc/Features_Data - Feature_Data.csv')
head(alc_df)
head(dem_df)
print(alc_df$State)
print(alc_df$State[0:51])
print(alc_df$State[0:52])
print(alc_df$State[0:51])
print(alc_df$State[0:51])
print(dem_df$State)
#print(dem_df$State)
dem_df[order(dem_df$State),]
alc_df = read.csv('Train_Data/ALCOHOL-2020-01--2020-12.csv')
alc_df <- alc_df[c("State", "Date", "Count")]
alc_df[order(alc_df$State),]
dem_df = read.csv('/home/johnattan/Documents/CHIP/GST_Alc/Features_Data - Feature_Data.csv')
dem_df[order(dem_df$State),]
alc_df = read.csv('Train_Data/ALCOHOL-2020-01--2020-12.csv')
alc_df <- alc_df[c("State", "Date", "Count")]
dem_df = read.csv('/home/johnattan/Documents/CHIP/GST_Alc/Features_Data - Feature_Data.csv')
print(dem_df$State)
#dem_df[order(dem_df$State),]
#c("AK", "AL", "AR" AZ CA CO CT DC DE FL GA HI IA ID IL IN KS KY LA MA MD ME MI MN MO MS MT NC ND NE NH NJ NM NV NY OH OK OR PA RI SC SD TN
#TX UT VA VT WA WI WV WY
alc_df = read.csv('Train_Data/ALCOHOL-2020-01--2020-12.csv')
#alc_df <- alc_df[c("State", "Date", "Count")]
#dem_df = read.csv('/home/johnattan/Documents/CHIP/GST_Alc/Features_Data - Feature_Data.csv')
head(alc_df)
alc_df = read.csv('Train_Data/ALCOHOL-2020-01--2020-12.csv')
#alc_df <- alc_df[c("State", "Date", "Count")]
#dem_df = read.csv('/home/johnattan/Documents/CHIP/GST_Alc/Features_Data - Feature_Data.csv')
head(alc_df)
alc_df = read.csv('Train_Data/ALCOHOL-2020-01--2020-12.csv')
alc_df <- alc_df[-c("X")]
alc_df = read.csv('Train_Data/ALCOHOL-2020-01--2020-12.csv')
alc_df <- alc_df[-c(1)]
#dem_df = read.csv('/home/johnattan/Documents/CHIP/GST_Alc/Features_Data - Feature_Data.csv')
head(alc_df)
library(mgcv)
head(alc_df)
gam1 = gam(Count ~ . - State, data = alc_df)
gam1 = gam(Count ~ s(.) - State, family=poisson, data = alc_df)
gam1 = gam(Count ~ . - State, family=poisson, data = alc_df)
head(alc_df)
print(colnames(ald_df))
head(alc_df)
print(colnames(alc_df))
gam1 = gam(Count ~ s(White.Percent) + s(Black.Percent) + s(Hispanic.Percent) +
s(Bachelor.s.Degree.or.higher) + s(Median.household.income) +
s(COVID.Cases....of.Population.) + s(Peak.Unemployment),
family=poisson, data = alc_df)
gam1 = gam(Count ~ s(White.Percent) + s(Black.Percent) + s(Hispanic.Percent) +
s(Bachelor.s.Degree.or.higher) + s(Median.household.income) +
s(Peak.Unemployment),
family=poisson, data = alc_df)
alc_df
gam1 = gam(Count ~ (White.Percent) + (Black.Percent) + (Hispanic.Percent) +
s(Bachelor.s.Degree.or.higher) + s(Median.household.income) +
s(Peak.Unemployment),
family=poisson, data = alc_df)
# "COVID.Cases....of.Population."
gam1 = gam(Count ~ (White.Percent) + (Black.Percent) + (Hispanic.Percent) +
s(Bachelor.s.Degree.or.higher) + s(Median.household.income) +
s(Peak.Unemployment), data = alc_df)
# "COVID.Cases....of.Population."
summary(gam1)
summary(gam1)
plot(gam1)
gam1 = gam(Count ~ s(White.Percent) + s(Black.Percent) + s(Hispanic.Percent) +
s(Bachelor.s.Degree.or.higher) + s(Median.household.income) +
s(Peak.Unemployment), data = alc_df)
gam1 = gam(Count ~ s(White.Percent) + s(Black.Percent) + s(Hispanic.Percent) +
(Bachelor.s.Degree.or.higher) + s(Median.household.income) +
(Peak.Unemployment), data = alc_df)
# "COVID.Cases....of.Population."
summary(gam1)
plot(gam1)
